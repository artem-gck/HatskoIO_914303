version: "3.9"
services:
    user_info:
        container_name: user_info_api
        build: 
            context: .
            dockerfile: MicroServices/UserInfoService/Dockerfile
        environment:
            UserInfoConnection: "Server=user_info_sql;Database=userInfo;User=SA;Password=yourStrong(!)Password"
            ServiceBus: "${ServiceBus}"
            IdentityPath: "${IdentityPath}"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - user_info_sql

    structure:
        container_name: structure_api
        build:
            context: .
            dockerfile: MicroServices/StructureService/Dockerfile
        environment:
            StructureConnection: "Server=structure_sql;Database=structure;User=SA;Password=yourStrong(!)Password"
            ServiceBus: "${ServiceBus}"
            ASPNETCORE_URLS: "https://+;http://+"
            IdentityPath: "${IdentityPath}"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on: 
            - structure_sql

    tasks:
        container_name: tasks_api
        build:
            context: .
            dockerfile: MicroServices/TaskCrudService/Dockerfile
        environment:
            ServiceBus: "${ServiceBus}"
            TasksConnection: "Server=tasks_sql;Database=tasks;User=SA;Password=yourStrong(!)Password"
            IdentityPath: "${IdentityPath}"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - tasks_sql

    documents:
        container_name: documents_api
        build:
            context: .
            dockerfile: MicroServices/DocumentCrudService/Dockerfile
        environment:
            DocumentsConnection: "mongodb://documents_mongo/documents"
            IdentityPath: "${IdentityPath}"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
            DockerConfiguration__UpdateCaCertificate: true
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - documents_mongo

    company_management:
        container_name: company_management_api
        build:
            context: .
            dockerfile: MicroServices/CompanyManagementService/Dockerfile
        environment:
            IdentityPath: "${IdentityPath}"
            CacheConnection: "company_management_redis"
            DepartmentsConnection: "https://structure/api/departments/"
            UsersStructureConnection: "https://structure/api/departments/"
            PositionsConnection: "https://structure/api/positions/"
            UsersInfoConnection: "https://user_info/api/"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - company_management_redis
            - user_info
            - structure

    notification:
        container_name: notification_api
        build:
            context: .
            dockerfile: MicroServices/NotificationService/Dockerfile
        environment:
            ServiceBus: "${ServiceBus}"
            NotificationConnection: "Server=notification_sql;Database=notification;User=SA;Password=yourStrong(!)Password"
            IdentityPath: "${IdentityPath}"
            SenderEmail: "g.artema31@gmail.com"
            SenderPassword: "artem13579"
            SenderHost: "smtp.gmail.com"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        depends_on:
            - notification_sql
        volumes:
            - ${CertPath}:/https/

    signatures:
        container_name: signatures_api
        build:
            context: .
            dockerfile: MicroServices/SignatureService/Dockerfile
        environment:
            IdentityPath: "${IdentityPath}"
            SignaturesConnection: "Data Source=signatures_sql;Initial Catalog=master;User=SA;Password=yourStrong(!)Password;TrustServerCertificate=True"
            DocumentServiceConnection: "https://documents/api/documents/"
            ServiceBus: "${ServiceBus}"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - documents
            - signatures_sql

    api-gateway:
        container_name: api-gateway
        build:
            context: .
            dockerfile: ApiGateway/Dockerfile
        ports:
            - "8080:443"
        environment:
            IdentityPath: "${IdentityPath}"
            ASPNETCORE_URLS: "https://+;http://+"
            ASPNETCORE_HTTPS_PORT: "8080"
            ASPNETCORE_ENVIRONMENT: "${Environment}"
            ASPNETCORE_Kestrel__Certificates__Default__Password: "${CertPassword}"
            ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
        volumes:
            - ${CertPath}:/https/
        depends_on:
            - user_info
            - structure
            - company_management
            - tasks
            - documents
            - signatures

    skoruba.identityserver4.admin:
        image: '${DOCKER_REGISTRY-}skoruba-identityserver4-admin'
        build:
            context: MicroServices/IdentityServer4.Admin
            dockerfile: src/Skoruba.IdentityServer4.Admin/Dockerfile
        container_name: identityserver_admin
        environment:
            - 'ConnectionStrings__ConfigurationDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__PersistedGrantDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__IdentityDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__AdminLogDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__AdminAuditLogDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__DataProtectionDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'AdminConfiguration__IdentityAdminBaseUrl=https://localhost:44303'
            - 'AdminConfiguration__IdentityAdminRedirectUri=https://localhost:44303/signin-oidc'
            - 'AdminConfiguration__IdentityServerBaseUrl=https://localhost:8082'
            - AdminConfiguration__RequireHttpsMetadata=false
            - 'IdentityServerData__Clients__0__ClientUri=https://localhost:44303'
            - 'IdentityServerData__Clients__0__RedirectUris__0=https://localhost:44303/signin-oidc'
            - 'IdentityServerData__Clients__0__FrontChannelLogoutUri=https://localhost:44303/signin-oidc'
            - 'IdentityServerData__Clients__0__PostLogoutRedirectUris__0=https://localhost:44303/signout-callback-oidc'
            - 'IdentityServerData__Clients__0__AllowedCorsOrigins__0=https://localhost:44303'
            - 'IdentityServerData__Clients__1__RedirectUris__0=https://admin-api.skoruba.local/swagger/oauth2-redirect.html'
            - 'Serilog__WriteTo__1__Args__connectionString=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - DockerConfiguration__UpdateCaCertificate=true
            - ASPNETCORE_ENVIRONMENT=${Environment}
        command: dotnet Skoruba.IdentityServer4.Admin.dll /seed
        depends_on:
            - db
            - identity
        volumes:
            - './MicroServices/IdentityServer4.Admin/shared/serilog.json:/app/serilog.json'
            - './MicroServices/IdentityServer4.Admin/shared/identitydata.json:/app/identitydata.json'
            - './MicroServices/IdentityServer4.Admin/shared/identityserverdata.json:/app/identityserverdata.json'
            - './MicroServices/IdentityServer4.Admin/shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'

    identity:
        image: '${DOCKER_REGISTRY-}skoruba-identityserver4-sts-identity'
        build:
            context: MicroServices/IdentityServer4.Admin
            dockerfile: src/Skoruba.IdentityServer4.STS.Identity/Dockerfile
        container_name: identityserver_sts_identity
        ports:
            - 8083:443
        environment:
            - 'ASPNETCORE_URLS=https://+;http://+'
            - 'ASPNETCORE_Kestrel__Certificates__Default__Password=${CertPassword}'
            - 'ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx'
            - 'ServiceBus=${ServiceBus}'
            - 'ConnectionStrings__ConfigurationDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__PersistedGrantDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__IdentityDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'ConnectionStrings__DataProtectionDbConnection=Server=db;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
            - 'AdminConfiguration__IdentityAdminBaseUrl=https://localhost:44303'
            - 'IdentityServerOptions__IssuerUri=https://localhost:8083'
            - IdentityServerOptions__Events__RaiseErrorEvents=true
            - IdentityServerOptions__Events__RaiseInformationEvents=true
            - IdentityServerOptions__Events__RaiseFailureEvents=true
            - IdentityServerOptions__Events__RaiseSuccessEvents=true
            - DockerConfiguration__UpdateCaCertificate=true
            - ASPNETCORE_ENVIRONMENT=Development
        depends_on:
            - db  
        volumes:
            - './MicroServices/IdentityServer4.Admin/shared/serilog.json:/app/serilog.json'
            - './MicroServices/IdentityServer4.Admin/shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
            - ${CertPath}:/https/

    db:
        image: 'mcr.microsoft.com/mssql/server:2017-CU20-ubuntu-16.04'
        ports:
            - 1433:1433
        container_name: skoruba-identityserver4-db
        environment:
            SA_PASSWORD: '${DB_PASSWORD:-Password_123}'
            ACCEPT_EULA: 'Y'
        volumes:
            - 'identity-dbdata:/var/opt/mssql'

    user_info_sql:
        container_name: user_info_sql
        image: "mcr.microsoft.com/mssql/server"
        environment:
            SA_PASSWORD: "yourStrong(!)Password"
            ACCEPT_EULA: "Y"
        volumes:
            - 'userinfo-dbdata:/var/opt/mssql'

    notification_sql:
        container_name: notification_sql
        image: "mcr.microsoft.com/mssql/server"
        environment:
            SA_PASSWORD: "yourStrong(!)Password"
            ACCEPT_EULA: "Y"
        volumes:
            - 'notification-dbdata:/var/opt/mssql'

    structure_sql:
        container_name: structure_sql
        image: "mcr.microsoft.com/mssql/server"
        environment:
            SA_PASSWORD: "yourStrong(!)Password"
            ACCEPT_EULA: "Y"
        volumes:
            - 'structure-dbdata:/var/opt/mssql'

    tasks_sql:
        container_name: tasks_sql
        image: "mcr.microsoft.com/mssql/server"
        environment:
            SA_PASSWORD: "yourStrong(!)Password"
            ACCEPT_EULA: "Y"
        volumes:
            - 'tasks-dbdata:/var/opt/mssql'

    signatures_sql:
        container_name: signatures_sql
        image: "mcr.microsoft.com/mssql/server"
        environment:
            SA_PASSWORD: "yourStrong(!)Password"
            ACCEPT_EULA: "Y"
        volumes:
            - 'signatures-dbdata:/var/opt/mssql'

    documents_mongo:
        container_name: documents_mongo
        image: "mongo"
        volumes:
            - 'documents-dbdata:/data/db'
    
    company_management_redis:
        container_name: company_management_redis
        image: "redis"

volumes:
    identity-dbdata:
        driver: local
    userinfo-dbdata:
        driver: local
    notification-dbdata:
        driver: local
    structure-dbdata:
        driver: local
    tasks-dbdata:
        driver: local
    signatures-dbdata:
        driver: local
    documents-dbdata:
        driver: local